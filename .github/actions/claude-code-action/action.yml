name: "Claude Code Action"
description: "Run Claude Code in GitHub Actions workflows"

inputs:
  github_token:
    description: "GitHub token with repo and issues permissions"
    required: true
  anthropic_api_key:
    description: "Anthropic API key"
    required: true
  prompt:
    description: "The prompt to send to Claude Code"
    required: false
    default: ""
  prompt_file:
    description: "Path to a file containing the prompt to send to Claude Code"
    required: false
    default: ""
  allowed_tools:
    description: "Comma-separated list of allowed tools for Claude Code to use"
    required: false
    default: ""
  output_file:
    description: "File to save Claude Code output to (optional)"
    required: false
    default: ""
  timeout_minutes:
    description: "Timeout in minutes for Claude Code execution"
    required: false
    default: "10"
  install_github_mcp:
    description: "Whether to install the GitHub MCP server"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Install Claude Code
      shell: bash
      run: npm install -g @anthropic-ai/claude-code

    - name: Install GitHub MCP Server
      if: inputs.install_github_mcp == 'true'
      shell: bash
      run: |
        claude mcp add-json github '{
          "command": "docker",
          "args": [
            "run",
            "-i",
            "--rm",
            "-e",
            "GITHUB_PERSONAL_ACCESS_TOKEN",
            "ghcr.io/github/github-mcp-server:sha-ff3036d"
          ],
          "env": {
            "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ inputs.GITHUB_TOKEN }}"
          }
        }'

    - name: Prepare Prompt File
      shell: bash
      id: prepare_prompt
      run: |
        # Check if either prompt or prompt_file is provided
        if [ -z "${{ inputs.prompt }}" ] && [ -z "${{ inputs.prompt_file }}" ]; then
          echo "::error::Neither 'prompt' nor 'prompt_file' was provided. At least one is required."
          exit 1
        fi

        # Determine which prompt source to use
        if [ ! -z "${{ inputs.prompt_file }}" ]; then
          # Check if the prompt file exists
          if [ ! -f "${{ inputs.prompt_file }}" ]; then
            echo "::error::Prompt file '${{ inputs.prompt_file }}' does not exist."
            exit 1
          fi

          # Use the provided prompt file
          PROMPT_PATH="${{ inputs.prompt_file }}"
        else
          mkdir -p /tmp/claude-action
          PROMPT_PATH="/tmp/claude-action/prompt.txt"
          echo "${{ inputs.prompt }}" > "$PROMPT_PATH"
        fi

        # Verify the prompt file is not empty
        if [ ! -s "$PROMPT_PATH" ]; then
          echo "::error::Prompt is empty. Please provide a non-empty prompt."
          exit 1
        fi

        # Save the prompt path for the next step
        echo "PROMPT_PATH=$PROMPT_PATH" >> $GITHUB_ENV

    - name: Run Claude Code
      shell: bash
      id: run_claude
      run: |
        ALLOWED_TOOLS_ARG=""
        if [ ! -z "${{ inputs.allowed_tools }}" ]; then
          ALLOWED_TOOLS_ARG="--allowedTools ${{ inputs.allowed_tools }}"
        fi

        # Set a timeout to ensure the command doesn't run indefinitely
        timeout_seconds=$((${{ inputs.timeout_minutes }} * 60))

        # Always capture output to a file for PR comments
        mkdir -p /tmp/claude-output
        CLAUDE_OUTPUT_FILE="/tmp/claude-output/claude_response.md"
        
        # Run Claude Code and capture output
        timeout $timeout_seconds claude \
          -p \
          --verbose \
          --output-format stream-json \
          "$(cat ${{ env.PROMPT_PATH }})" \
          ${{ inputs.allowed_tools != '' && format('--allowedTools "{0}"', inputs.allowed_tools) || '' }} | tee output.txt

        # Process output.txt into JSON
        jq -s '.' output.txt > output.json

        # Extract the content from all assistant messages (not system messages)
        # and ensure we're only getting the formatted review content
        jq -r '[.[] | select(.role == "assistant") | .content | if type == "array" then map(select(.type == "text").text) | join("\n") else . end] | join("\n")' output.json > "$CLAUDE_OUTPUT_FILE"

        # If output_file was specified, copy there too
        if [ ! -z "${{ inputs.output_file }}" ]; then
          cp "$CLAUDE_OUTPUT_FILE" "${{ inputs.output_file }}"
          echo "Complete output saved to output.json, final response saved to ${{ inputs.output_file }}"
        fi

        # Save output path for next step
        echo "CLAUDE_OUTPUT_FILE=$CLAUDE_OUTPUT_FILE" >> $GITHUB_ENV
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        
    - name: Comment on PR
      shell: bash
      run: |
        # Only run this step if we're in a PR context
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" || "$GITHUB_EVENT_NAME" == "pull_request_target" ]]; then
          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
          fi
          
          # Get PR number - either directly from event or from GITHUB_REF
          PR_NUMBER=$(echo $GITHUB_REF | sed -n 's/refs\/pull\/\([0-9]*\)\/merge/\1/p')
          if [ -z "$PR_NUMBER" ]; then
            # Try to get it from the event context
            PR_NUMBER=$(jq -r '.pull_request.number // empty' $GITHUB_EVENT_PATH)
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Commenting on PR #$PR_NUMBER"
            
            # Format the comment with nice header
            {
              echo "# ðŸ¤– Claude Code PR Review v2"
              echo ""
              echo "$(cat ${{ env.CLAUDE_OUTPUT_FILE }})"
              echo ""
              # Extract cost from output.json if available
              if [[ -f "output.json" ]]; then
                COST=$(jq -r '[.[] | select(.role == "system") | .cost_usd] | if length > 0 then .[0] else 0 end' output.json)
                # Format cost to $0.00 format
                printf -v FORMATTED_COST '$%.2f' "${COST:-0}"
                echo "**Cost:** $FORMATTED_COST USD"
                echo ""
              fi
              TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S UTC")
              echo "<sub>Generated by Claude Code action | Last updated: $TIMESTAMP</sub>"
            } > /tmp/claude-output/pr_comment.md
            
            # Get repository information from GITHUB_REPOSITORY environment variable
            REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
            REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
            
            # Check if comment already exists and update it, or create new one
            echo "Looking for existing Claude Code PR review comments..."
            COMMENT_ID=$(gh api "repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" -q '.[] | select(.body | contains("ðŸ¤– Claude Code PR Review v2")) | .id' | head -n1)
            
            if [ -n "$COMMENT_ID" ]; then
              # Update existing comment
              echo "Found existing comment ID: $COMMENT_ID. Updating..."
              gh api --method PATCH "repos/$GITHUB_REPOSITORY/issues/comments/$COMMENT_ID" -f body="$(cat /tmp/claude-output/pr_comment.md)"
              echo "Successfully updated existing Claude Code PR review comment"
            else
              # Post new comment
              echo "No existing comment found. Creating new comment..."
              gh pr comment $PR_NUMBER -F /tmp/claude-output/pr_comment.md
              echo "Successfully posted new Claude Code PR review comment"
            fi
          else
            echo "Could not determine PR number, skipping comment step"
          fi
        else
          echo "Not a PR event, skipping PR comment step"
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}